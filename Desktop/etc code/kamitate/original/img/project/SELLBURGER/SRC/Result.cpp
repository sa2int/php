//======================================================================================//
//
//						リザルトプログラム
//
//======================================================================================//
#include		<windows.h>
#include		<stdio.h>
#include		<math.h>
#include		"MASTER/Ci-Lib.H"
#include		"Game.H"

//****************************************************************************
//	■	定義
//
//****************************************************************************
#define TEXT_W	450
#define TEXT_H	200


//****************************************************************************
//	■	内部使用　変数
//
//****************************************************************************
GsTEXTURE	ResultBG;
GsTEXTURE	TText;
GsTEXTURE	OText;

GsSOUND		RBGM;
short KKK[2];
short HC, HA;
//--------------------------------------------------------------------------//
//	●	初期化		：シーンに移る時一回、変数の初期化 
//
//--------------------------------------------------------------------------//
void	ResultInit(void)
{
	HC = 0;
	HA = 1;

	
}

//--------------------------------------------------------------------------//
//	●	内部処理	：シーン中の処理、現在のシーンで行う処理
//
//--------------------------------------------------------------------------//
void	ResultLoop(void)
{
	DEB_TEXT(" タイトル %d", KKK[0]);
	DEB_TEXT(" ワンモア %d", KKK[1]);
	
	HC = HC + HA;

	if (MsAREA(400 - 200, 850 - 100, TEXT_W, TEXT_H)) {
		KKK[0] = ON;
		if (Mouse.Trg &_lMOUSE) {
			SceneChange(TITLE_SCENE);
		}
	}
	else
	{
		KKK[0] = OFF;
	}

	if (MsAREA(1520 - 200, 850 - 100, TEXT_W, TEXT_H)) {
		KKK[1] = ON;
		if (Mouse.Trg &_lMOUSE) {
			SceneChange(GAME_SCENE);
		}
	}
	else
	{
		KKK[1] = OFF;
	}

	if (HC >= 1 && 1 <= HC) {
		Gs_PlayBGM(RBGM);
	}
	if (HC >= 2) {
		HC = 0;
		HA = 0;
	}

}

//--------------------------------------------------------------------------//
//	●	描画		：シーン中の描画、現在のシーンで表示するBMPはここで
//
//--------------------------------------------------------------------------//
void	ResultDraw(void)
{
	Gs_DrawLayer(960, 540, ResultBG, 0, 0, 1920, 1080, OFF, ARGB(254, 255, 255, 254), ON, 0, 1.0f, 1.0f);
	Gs_DrawLayer(400, 850, TText, 0, 0, TEXT_W, TEXT_H, OFF, ARGB(254, 255, 255, 254), ON, 0, 1.0f, 1.0f);
	Gs_DrawLayer(1520, 850, OText, 0, 0, TEXT_W, TEXT_H, OFF, ARGB(254, 255, 255, 254), ON, 0, 1.0f, 1.0f);

}

//--------------------------------------------------------------------------//
//	●	ロード		：シーンに入る時、そのシーンで必要なデータの読み込み
//
//--------------------------------------------------------------------------//
short	ResultLoad(void)
{
	ResultBG = Gs_LoadBMP("DATA/BMP/リザルト/背景.PNG");
	TText = Gs_LoadBMP("DATA/BMP/リザルト/Title.PNG");
	OText = Gs_LoadBMP("DATA/BMP/リザルト/OneMore.PNG");

	RBGM = Gs_LoadWAVE("DATA/SOUND/リザルト/リザルトBGM.WAV", ON);
	return		RESULT_SCENE;
}

//--------------------------------------------------------------------------//
//	●	後処理		：現在のシーンから抜ける時、データの破棄
//
//--------------------------------------------------------------------------//
void	ResultExit(void)
{
	Gs_ReleaseBMP(ResultBG);
	Gs_ReleaseBMP(TText);
	Gs_ReleaseBMP(OText);
	Gs_ReleaseSOUND(RBGM);

}

//****************************************************************************
//	★　シーンテーブル：各シーンで呼び出される関数の登録
//****************************************************************************

SCENE_TBL	ResultSceneTbl = {
	ResultLoad,
	ResultInit,
	ResultLoop,
	ResultDraw,
	ResultExit
};

//======================================================================================//
//							EOP															//
//======================================================================================//
