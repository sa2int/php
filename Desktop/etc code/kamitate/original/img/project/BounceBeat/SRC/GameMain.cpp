//======================================================================================//////							ゲームプログラム////======================================================================================//#include		<windows.h>#include		<stdio.h>#include		<math.h>#include		"MASTER/Ci-Lib.H"#include		"Game.H"//****************************************************************************//	■	定義////****************************************************************************#define		NortsSPEED		4.0f#define		YokoLine_W		342#define		YokoLine_H		42#define		TateLine_W		42#define		TateLine_H		300#define		OBJ_W			120#define		OBJ_H			120#define		Fade_MAX		4#define		Line_MAX		4#define		OBJ_MAX			50#define		BD_MAX			97		// 出現データ数//****************************************************************************//	■	構造体　型////****************************************************************************typedef struct{	float Px,Py;	float Dx, Dy;	short Flg;	short Fade, FadeAdd;}NORTS;typedef struct {	float Px;	float Py;	short Flg;}LINE;typedef struct {	float Px, Py;	short Flg;}LINETAB;// 管理 DATAtypedef struct {	short	TimStep;	// 現在のデータテーブルの進行数	short	TimCnt;		// フレームカウント}GMDAT;// データテーブル情報typedef struct {	short	Time;	short	x;	short	y;	float	dx;	float	dy;}BONDAT;//****************************************************************************//	■	内部使用　変数////****************************************************************************GsSOUND		GameBGM;//------------全体の画像-------------//GsTEXTURE	IngameBG;GsTEXTURE	Center;//------------ラインの画像-------------//GsTEXTURE	Line;GsTEXTURE	LineP;//------------ノーツの画像-------------//GsTEXTURE	Norts;NORTS	Obj[OBJ_MAX];LINE	Play[4];LINETAB Tab[4];//------------データテーブル関係-------------//GMDAT		Gm;//-------------------------------------------------------------------------------------//// 出現情報　データテーブル BORN DATA//-------------------------------------------------------------------------------------//BONDAT	BonTBL[BD_MAX] = {	//	 Time		{ 7.3 * 60,	667,375,	NortsSPEED, 0.0f },	{ 1.45 * 60,	667,375,	0.0f , NortsSPEED },	{ 1.45 * 60,	667,375,	-NortsSPEED , 0.0f },	{ 1.45 * 60,	667,375,	0.0f , -NortsSPEED },	{ 1.45 * 60,	667,375,	NortsSPEED, 0.0f },	{ 1.45 * 60,	667,375,	0.0f , NortsSPEED },	{ 1.45 * 60,	667,375,	-NortsSPEED , 0.0f },	{ 1.45 * 60,	667,375,	0.0f , -NortsSPEED },	{ 1.45 * 60,	667,375,	0.0f, NortsSPEED },	{ 1.45 * 60,	667,375,	-NortsSPEED , 0.0f},	{ 1.45 * 60,	667,375,	0.0f , -NortsSPEED },	{ 1.45 * 60,	667,375,	NortsSPEED , 0.0f },	{ 1.45 * 60,	667,375,	0.0f, -NortsSPEED },	{ 1.45 * 60,	667,375,	-NortsSPEED , 0.0f },	{ 1.45 * 60,	667,375,	0.0f , NortsSPEED },	{ 1.45 * 60,	667,375,	NortsSPEED , 0.0f },	{ 1.45 * 60,	667,375,	NortsSPEED , 0.0f },	{ 1.45 * 60,	667,375,	-NortsSPEED , 0.0f },	{ 1.45 * 60,	667,375,	NortsSPEED , 0.0f },	{ 1.45 * 60,	667,375,	-NortsSPEED, 0.0f },	{ 1.45 * 60,	667,375,	NortsSPEED , 0.0f},	{ 1.45 * 60,	667,375,	-NortsSPEED , 0.0f },	{ 1.45 * 60,	667,375,	-NortsSPEED , 0.0f },	{ 1.45 * 60,	667,375,	0.0f , NortsSPEED },	{ 1.45 * 60,	667,375,	0.0f , -NortsSPEED },	{ 1.45 * 60,	667,375,	0.0f , NortsSPEED },	{ 1.45 * 60,	667,375,	0.0f, -NortsSPEED },	{ 1.45 * 60,	667,375,	0.0f , NortsSPEED },	{ 1	  * 60,	667,375,	-NortsSPEED , 0.0f },	{ 1   * 60,	667,375,	NortsSPEED , 0.0f },	//--30ノーツ--//	{ 3 * 60,	667,375,	NortsSPEED, 0.0f },	{ 1.7 * 60,	667,375,	0.0f , NortsSPEED },	{ 1.7 * 60,	667,375,	-NortsSPEED , 0.0f },	{ 1.7 * 60,	667,375,	NortsSPEED, 0.0f },	{ 1.7 * 60,	667,375,	0.0f , NortsSPEED },	{ 1.7 * 60,	667,375,	-NortsSPEED , 0.0f },	{ 1.7 * 60,	667,375,	-NortsSPEED , 0.0f },	{ 1.7 * 60,	667,375,	0.0f , NortsSPEED },	{ 1.7 * 60,	667,375,	NortsSPEED, 0.0f },	{ 1.7 * 60,	667,375,	-NortsSPEED , 0.0f },	{ 1.7 * 60,	667,375,	0.0f , NortsSPEED },	{ 1.7 * 60,	667,375,	NortsSPEED, 0.0f },	{ 1.2 * 60,	667,375,	0.0f, NortsSPEED },	{ 1.2 * 60,	667,375,	0.0f,  NortsSPEED },	{ 1.2 * 60,	667,375,	0.0f , NortsSPEED },	{ 1.2 * 60,	667,375,	NortsSPEED , 0.0f },	{ 1.2 * 60,	667,375,	NortsSPEED , 0.0f },	{ 1.2 * 60,	667,375,	NortsSPEED , 0.0f },	{ 1.2 * 60,	667,375,	NortsSPEED , 0.0f },	{ 1.2 * 60,	667,375,	-NortsSPEED, 0.0f },	{ 1.1 * 60,	667,375,	NortsSPEED , 0.0f },	{ 1.2 * 60,	667,375,	0.0f , -NortsSPEED },	{ 1.2 * 60,	667,375,	-NortsSPEED , 0.0f },	{ 1.2 * 60,	667,375,	NortsSPEED , 0.0f },	{ 1.1 * 60,	667,375,	0.0f , NortsSPEED },	{ 0.5 * 60,	667,375,	0.0f , NortsSPEED },	{ 0.5 * 60,	667,375,	0.0f ,  NortsSPEED },	{ 0.5 * 60,	667,375,	0.0f , NortsSPEED },	{ 1 * 60,	667,375,	0.0f , -NortsSPEED },		//--60ノーツ--//	-1};short  ObjFadeF[Fade_MAX];short  Mouse_Flg;short  Cnt, CntAd;short  AllCnt, AllAd;//--------------------------------------------------------------------------////	●	ラインの初期化////--------------------------------------------------------------------------//void	LineStats(void) {	Play[0].Px = 333;	Play[0].Py = 375;	Play[1].Px = 1000;	Play[1].Py = 375;	Play[2].Px = 685;	Play[2].Py = 85;	Play[3].Px = 685;	Play[3].Py = 675;}//--------------------------------------------------------------------------////	●	初期化		：シーンに移る時一回、変数の初期化////--------------------------------------------------------------------------//void	GameInit(void){	// Manage	Gm.TimStep = 0;	Gm.TimCnt = 0;	// OBJ	for (short i = 0; i<OBJ_MAX; i++) {		Obj[i].Flg = OFF;		Obj[i].Fade = 255;		Obj[i].FadeAdd = 8;	}	LineStats();	Cnt = 0;	CntAd = 1;	AllCnt = 0;	AllAd = 1;}	//--------------------------------------------------------------------------//	void	ObjBorn(short x, short y, float dx, float dy)	{		for (short i = 0; i<OBJ_MAX; i++) {			if (Obj[i].Flg == OFF) {				Obj[i].Flg = ON;				Obj[i].Px = F(x);				Obj[i].Py = F(y);				Obj[i].Dx = F(dx);				Obj[i].Dy = F(dy);				break;			}		}	}//--------------------------------------------------------------------------////	●	ノーツの当たり////--------------------------------------------------------------------------//void	NortsHit(void) {	for (short i = 0; i < OBJ_MAX; i++) {		if (Play[0].Flg == ON) {			if ((Play[0].Px - (TateLine_W / 2) <= Obj[i].Px + (OBJ_W / 2)) && (Play[0].Px + (TateLine_W / 2) >= Obj[i].Px - (OBJ_W / 2)) && (Play[0].Py - (TateLine_H / 2) <= Obj[i].Py + (OBJ_H / 2)) && (Play[0].Py + (TateLine_H / 2) >= Obj[i].Py - (OBJ_H / 2))) {				ObjFadeF[i] = ON;				Play[0].Flg = OFF;				Obj[i].Dx = NortsSPEED;			}		}		if (Play[1].Flg == ON) {			if ((Play[1].Px - (TateLine_W / 2) <= Obj[i].Px + (OBJ_W / 2)) && (Play[1].Px + (TateLine_W / 2) >= Obj[i].Px - (OBJ_W / 2)) && (Play[1].Py - (TateLine_H / 2) <= Obj[i].Py + (OBJ_H / 2)) && (Play[1].Py + (TateLine_H / 2) >= Obj[i].Py - (OBJ_H / 2))) {				ObjFadeF[i] = ON;				Play[1].Flg = OFF;				Obj[i].Dx = -NortsSPEED;			}		}		if (Play[2].Flg == ON) {			if ((Play[2].Px - (YokoLine_W / 2) <= Obj[i].Px + (OBJ_W / 2)) && (Play[2].Px + (YokoLine_W / 2) >= Obj[i].Px - (OBJ_W / 2)) && (Play[2].Py - (YokoLine_H / 2) <= Obj[i].Py + (OBJ_H / 2)) && (Play[2].Py + (YokoLine_H / 2) >= Obj[i].Py - (OBJ_H / 2))) {				ObjFadeF[i] = ON;				Play[2].Flg = OFF;				Obj[i].Dy = NortsSPEED;			}		}		if (Play[3].Flg == ON) {			if ((Play[3].Px - (YokoLine_W / 2) <= Obj[i].Px + (OBJ_W / 2)) && (Play[3].Px + (YokoLine_W / 2) >= Obj[i].Px - (OBJ_W / 2)) && (Play[3].Py - (YokoLine_H / 2) <= Obj[i].Py + (OBJ_H / 2)) && (Play[3].Py + (YokoLine_H / 2) >= Obj[i].Py - (OBJ_H / 2))) {				ObjFadeF[i] = ON;				Play[3].Flg = OFF;				Obj[i].Dy = -NortsSPEED;			}		}	}	}//--------------------------------------------------------------------------////	●	ノーツの跳ね返り後////--------------------------------------------------------------------------//void	NortsRefrect(void) {	for (short i = 0; i<OBJ_MAX; i++) {		if (ObjFadeF[i] == ON){			Obj[i].Fade = Obj[i].Fade - Obj[i].FadeAdd;		}		if (Obj[i].Fade <= 0) {			Obj[i].Flg = OFF;			ObjFadeF[i] = OFF;		}	}}//--------------------------------------------------------------------------////	●	ラインの生み出し(ドラック＆ドロップ)////--------------------------------------------------------------------------//void	LinePorn(void) {	if (Mouse.Trg&_lMOUSE) {		Mouse_Flg = ON;	}		if (Mouse.Pul&_lMOUSE) {		if (Mouse.Dy >= 0 && Mouse.Px <= 467) {			Play[0].Flg = ON;			Play[0].Px = 333;			Play[0].Py = 375;		}		Mouse_Flg = OFF;			}	if (Mouse_Flg == ON && Mouse.Px <= 467 ) {		if (Mouse.Now) {			if (MsAREA(Play[0].Px, Play[0].Py, TateLine_W, TateLine_H)) {				Play[0].Px = Mouse.Px;			}		}	}	//---------------左ライン--------------------//	if (Mouse.Trg&_lMOUSE) {		Mouse_Flg = ON;	}	if (Mouse.Pul&_lMOUSE) {		if (Mouse.Dy >= 0 && Mouse.Px >= 867) {			Play[1].Flg = ON;			Play[1].Px = 1000;			Play[1].Py = 375;		}		Mouse_Flg = OFF;	}	if (Mouse_Flg == ON && Mouse.Px >= 867) {		if (Mouse.Now) {			if (MsAREA(Play[1].Px, Play[1].Py, TateLine_W, TateLine_H)) {				Play[1].Px = Mouse.Px;			}		}	}	//---------------右ライン-------------------//	if (Mouse.Trg&_lMOUSE) {		Mouse_Flg = ON;	}	if (Mouse.Pul&_lMOUSE) {		if (Mouse.Dy >= 0 && Mouse.Py <= 175) {			Play[2].Flg = ON;			Play[2].Px = 685;			Play[2].Py = 85;		}		Mouse_Flg = OFF;	}	if (Mouse_Flg == ON && Mouse.Py <= 175) {		if (MsAREA(Play[2].Px, Play[2].Py, YokoLine_W, YokoLine_H)) {			if (Mouse.Now) {				Play[2].Py = Mouse.Py;			}		}	}		//---------------上ライン------------------//	if (Mouse.Trg&_lMOUSE) {		Mouse_Flg = ON;	}	if (Mouse.Pul&_lMOUSE) {		if (Mouse.Dy >= 0 && Mouse.Py >= 575) {			Play[3].Flg = ON;			Play[3].Px = 685;			Play[3].Py = 675;		}		Mouse_Flg = OFF;	}	if (Mouse_Flg == ON && Mouse.Py >= 575) {			if (MsAREA(Play[3].Px, Play[3].Py, YokoLine_W, YokoLine_H)) {				if (Mouse.Now) {				Play[3].Py = Mouse.Py;			}		}	}	//---------------下ライン-----------------//}//--------------------------------------------------------------------------////	●	内部処理	：シーン中の処理、現在のシーンで行う処理////--------------------------------------------------------------------------//void	DataOutTime(void){	// 出現データテーブルの最後まできたか？	if (BonTBL[Gm.TimStep].Time != -1) {		// タイムカウントアップ		Gm.TimCnt = Gm.TimCnt + 1;		// テーブル登録タイムと現在のカウントを比較		if (BonTBL[Gm.TimStep].Time <= Gm.TimCnt) {			// テーブルデータ通りに生み出し			ObjBorn(BonTBL[Gm.TimStep].x, BonTBL[Gm.TimStep].y, BonTBL[Gm.TimStep].dx, BonTBL[Gm.TimStep].dy);			// NEXT LINE			Gm.TimStep = Gm.TimStep + 1;			Gm.TimCnt = 0;		}	}}//--------------------------------------------------------------------------//void	ObjTask(void){	for (short i = 0; i<OBJ_MAX; i++) {		if (Obj[i].Flg == ON) {			// 座標更新			Obj[i].Px = Obj[i].Px + Obj[i].Dx;			Obj[i].Py = Obj[i].Py + Obj[i].Dy;			// 画面外（フレームアウト）で消滅			if (Obj[i].Px < 0 - OBJ_W || Obj[i].Px > 1334 + OBJ_W ||				Obj[i].Py < 0 - OBJ_H || Obj[i].Py > 750 + OBJ_H) {				Obj[i].Flg = OFF;			}		}	}}void	GameLoop(void){	DEB_TEXT(" タイム%d", Gm.TimCnt);	DEB_TEXT(" オールタイム%d", AllCnt);	AllCnt = AllCnt + AllAd;		Cnt = Cnt + CntAd;		if (Cnt >= 1 && Cnt <= 1) {			Gs_PlayBGM(GameBGM);		}		for (short i = 0; i < OBJ_MAX; i++) {			Obj[i].Px = Obj[i].Px + Obj[i].Dx;			Obj[i].Py = Obj[i].Py + Obj[i].Dy;			if (Obj[i].Flg == OFF) {				Obj[i].Px = 667;				Obj[i].Py = 375;				Obj[i].Fade = 255;			}		}		NortsHit();		LinePorn();		// 出現管理		DataOutTime();		// 生み出し後のオブジェクト処理		ObjTask();		for (short i = 0; i < OBJ_MAX; i++) {			if (ObjFadeF[i] == ON) {				NortsRefrect();			}		}		if (AllCnt >= 5800) {			AllCnt = 0;			SceneExit(GAME_SCENE);		}}//--------------------------------------------------------------------------////	●	描画		：シーン中の描画、現在のシーンで表示するBMPはここで////--------------------------------------------------------------------------//// ゲーム画面　描画void	GameDraw(void){	//絵の一部分を切り抜いて表示	Gs_DrawLayer(667, 375, IngameBG, 0, 0, 1334, 750, OFF, ARGB(255, 255, 254, 255), ON, 0, 1.0f, 1.0f);	Gs_DrawLayer(667, 375, Center, 0, 0, 350, 350, OFF, ARGB(255, 255, 254, 255), ON, 0, 1.0f, 1.0f);		Gs_DrawLayer(333, 375, LineP, 0, 0, 42, 300, OFF, ARGB(255, 255, 254, 255), ON, 0, 1.0f, 1.0f);	Gs_DrawLayer(1000, 375, LineP, 0, 0, 42, 300, OFF, ARGB(255, 255, 254, 255), ON, 0, 1.0f, 1.0f);	Gs_DrawLayer(685, 85, LineP, 43, 0, 342, 42, OFF, ARGB(255, 255, 254, 255), ON, 0, 1.0f, 1.0f);	Gs_DrawLayer(685, 675, LineP, 43, 0, 342, 42, OFF, ARGB(255, 255, 254, 255), ON, 0, 1.0f, 1.0f);	if (Play[0].Flg == ON) {		Gs_DrawLayer(Play[0].Px, Play[0].Py, Line, 0, 0, TateLine_W, TateLine_H, OFF, ARGB(255, 255, 254, 255), ON, 0, 1.0f, 1.0f);	}	if (Play[1].Flg == ON) {		Gs_DrawLayer(Play[1].Px, Play[1].Py, Line, 0, 0, TateLine_W, TateLine_H, OFF, ARGB(255, 255, 254, 255), ON, 0, 1.0f, 1.0f);	}	if (Play[2].Flg == ON) {		Gs_DrawLayer(Play[2].Px, Play[2].Py, Line, 43, 0, YokoLine_W, YokoLine_H, OFF, ARGB(255, 255, 254, 255), ON, 0, 1.0f, 1.0f);	}	if (Play[3].Flg == ON) {		Gs_DrawLayer(Play[3].Px, Play[3].Py, Line, 43, 0, YokoLine_W, YokoLine_H, OFF, ARGB(255, 255, 254, 255), ON, 0, 1.0f, 1.0f);	}	for (short i = 0; i < OBJ_MAX; i++) {		if (Obj[i].Flg == ON) {			Gs_DrawLayer(Obj[i].Px, Obj[i].Py, Norts, 0, 0, OBJ_W, OBJ_H, OFF, ARGB(Obj[i].Fade, 255, 254, 255), ON, 0, 1.0f, 1.0f);		}	}}//--------------------------------------------------------------------------////	●	ロード		：シーンに入る時、そのシーンで必要なデータの読み込み////--------------------------------------------------------------------------//short	GameLoad(void){	IngameBG = Gs_LoadBMP("DATA/BMP/背景.PNG");	Center = Gs_LoadBMP("DATA/BMP/中央の丸.PNG");	Line = Gs_LoadBMP("DATA/BMP/ライン.PNG");	LineP = Gs_LoadBMP("DATA/BMP/ライン出現位置.PNG");	Norts = Gs_LoadBMP("DATA/BMP/ノーツ.PNG");			GameBGM = Gs_LoadWAVE("DATA/SOUND/サイバー43.WAV", ON);	return		GAME_SCENE;}//--------------------------------------------------------------------------////	●	後処理		：現在のシーンから抜ける時、データの破棄////--------------------------------------------------------------------------//void	GameExit(void){	Gs_ReleaseBMP(IngameBG);	Gs_ReleaseBMP(Center);	Gs_ReleaseBMP(Line);	Gs_ReleaseBMP(LineP);	Gs_ReleaseBMP(Norts);	Gs_ReleaseSOUND(GameBGM);	}//****************************************************************************//	★　シーンテーブル：各シーンで呼び出される関数の登録//****************************************************************************SCENE_TBL	GameSceneTbl = {		GameLoad,		GameInit,		GameLoop,		GameDraw,		GameExit};//======================================================================================////							EOP															////======================================================================================//